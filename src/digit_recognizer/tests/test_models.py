"""This module is to test
"""
from pathlib import Path

import torch
from torch.utils.data import DataLoader

from digit_recognizer.models.models import BasicConvNet
from digit_recognizer.utils.datamodule import MNISTDataModule


def test_datamodule():
    """To Test functions of datamodule
    Test items include:
    1. If data is downloaded to correct path
    2. Training, Validation, Test Datasets size is correct
    3. Batch Size generated by Pytorch DataLoader is correct
    """

    def get_sample_size(loader: DataLoader, batch_size: int):
        """Get inputs and labels batch size from 1 batch of DataLoader
        Args:
            loader (DataLoader): DataLoader
            batch_size (int): DataLoader batch size

        Returns:
            Tuple: (torch.Size(batch_inputs), torch.Size(batch_labels))
        """
        images, labels = next(iter(loader))
        return images.shape, labels.shape

    batch_size = 64
    test_module = MNISTDataModule(batch_size=batch_size)
    path = Path(test_module.data_dir) / "MNIST"
    assert path.exists(), "Data Not Downloaded"

    test_module.setup(stage="fit")
    assert len(test_module.mnist_full) == 60000, "Full train_dataset size mismatched"
    assert len(test_module.mnist_train) == 50000, "Split train_dataset size mismatched"
    assert len(test_module.mnist_val) == 10000, "val_dataset size mismatched"

    test_module.setup(stage="test")
    assert len(test_module.mnist_test) == 10000, "Test dataset size mismatched"

    trainloader = test_module.train_dataloader()
    assert get_sample_size(trainloader, batch_size) == (
        torch.Size([batch_size, 1, 28, 28]),
        torch.Size([batch_size]),
    ), "Trainloader Function Issue"

    valloader = test_module.val_dataloader()
    assert get_sample_size(valloader, batch_size) == (
        torch.Size([batch_size, 1, 28, 28]),
        torch.Size([batch_size]),
    ), "Valloader Function Issue"

    testloader = test_module.test_dataloader()
    assert get_sample_size(testloader, batch_size) == (
        torch.Size([batch_size, 1, 28, 28]),
        torch.Size([batch_size]),
    ), "Testloader Function Issue"


def test_model():
    """Test that model outputs correct size"""
    sample = torch.randn(3, 1, 28, 28)
    model = BasicConvNet()
    out_sample = model(sample)

    assert out_sample.shape == torch.Size([3, 10]), "Output Size mismatch"
